plugins {
    id 'com.android.application'
    id 'com.jaredsburrows.license' version '0.8.+' // Use the plugins block for this
    id 'com.google.protobuf' // Needed for gRPC
}

import com.android.build.OutputFile

android {
    compileSdkVersion 31
    defaultConfig {
        applicationId "zapsolutions.zap"
        minSdkVersion 24
        targetSdkVersion 31
        versionCode 40
        versionName "0.5.10-beta"
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        setProperty("archivesBaseName", "zap-android-" + versionName + "(" + versionCode + ")")
    }
    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            resValue "string", "app_name", "Zap Debug"
            debuggable true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            resValue "string", "app_name", "Zap"
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        disable 'MissingTranslation'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }
}

// License Report Plugin Configuration
licenseReport {
    generateHtmlReport = false
    generateJsonReport = true
    copyHtmlReportToAssets = false
    copyJsonReportToAssets = false
}

// Copy the licenses file into the res dir if it exists
tasks.register('copyLicenses') {
    doLast {
        copy {
            from "$buildDir/reports/licenses/licenseReleaseReport.json"
            into "$projectDir/src/main/res/raw/"
            rename "licenseReleaseReport.json", "license_report.json"
        }
    }
}

// Needed for gRPC
sourceSets {
    main.java.srcDirs += "${protobuf.generatedFilesBaseDir}/main/javalite"
}

// Map for the version code that gives each ABI a value.
ext.abiCodes = ['armeabi-v7a': 1, 'arm64-v8a': 2, 'x86': 3]

// For each APK output variant, override versionCode
android.applicationVariants.all { variant ->
    variant.outputs.each { output ->
        def baseAbiVersionCode = project.ext.abiCodes.get(output.getFilter(OutputFile.ABI))
        if (baseAbiVersionCode != null) {
            output.versionCodeOverride = baseAbiVersionCode * 1000 + 3000 + variant.versionCode
        } else {
            output.versionCodeOverride = 3000 + variant.versionCode
        }
    }
}

// Needed for gRPC
protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.13.0"
    }
    plugins {
        javalite { artifact = "com.google.protobuf:protoc-gen-javalite:3.0.0" }
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.51.1'
        }
    }

    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option 'lite'
                }
            }
            task.plugins {
                grpc {
                    option 'lite'
                }
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.journeyapps:zxing-android-embedded:4.3.0'
    implementation 'com.github.kenglxn.QRGen:android:3.0.1'
    implementation 'com.jakewharton:process-phoenix:2.1.2'
    implementation "com.squareup.okhttp3:okhttp:4.9.0"
    implementation 'com.github.michaelWuensch:avathor-android-library:1.1.0'
    implementation "io.matthewnelson.topl-android:tor-binary:0.4.6.5"
    implementation "io.matthewnelson.topl-android:topl-service:2.1.2"
    implementation 'io.grpc:grpc-okhttp:1.51.1'
    implementation 'io.grpc:grpc-protobuf-lite:1.51.1'
    implementation 'io.grpc:grpc-stub:1.51.1'
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    implementation 'com.google.code.gson:gson:2.9.0'
    compileOnly 'com.google.api.grpc:googleapis-common-protos:0.0.3'
    implementation 'com.google.guava:guava:29.0-android'
    implementation "io.reactivex.rxjava3:rxandroid:3.0.0"
    implementation 'androidx.appcompat:appcompat:1.4.2'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.preference:preference:1.2.0'
    implementation 'androidx.biometric:biometric:1.1.0'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation "androidx.security:security-crypto:1.1.0-alpha03"
    implementation 'com.google.android.material:material:1.4.0'
    testImplementation 'org.json:json:20200518'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test:runner:1.5.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}